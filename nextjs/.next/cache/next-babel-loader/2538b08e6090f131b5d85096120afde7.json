{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Conf from \"../config/config-dev\";\n/**\n * Request api's class\n */\n\nvar FetchWeather =\n/**\n * @param {string} cityName\n * @param {string} stateCode\n * @param {string} units\n */\nfunction FetchWeather() {\n  var _this = this;\n\n  var cityName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"paris\";\n  var stateCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"fr\";\n  var units = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"metric\";\n  var lang = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"fr\";\n\n  _classCallCheck(this, FetchWeather);\n\n  _defineProperty(this, \"getCurrentWeather\", function (success, failed) {\n    var query = \"\".concat(_this.url).concat(_this.uri, \"q=\").concat(_this.cityName, \",\").concat(_this.stateCode, \"&appid=\").concat(_this.appId, \"&units=\").concat(_this.units, \"&lang=\").concat(_this.lang);\n    fetch(query).then(function (response) {\n      if (response.status === 200) return response.json();else throw new Error(\"response Error:  \", response);\n    }).then(function (data) {\n      success(data);\n    })[\"catch\"](function (error) {\n      failed(error);\n    });\n  });\n\n  this.url = Conf.api.weather.END_POINT;\n  this.uri = Conf.api.weather.URI;\n  this.appId = Conf.api.weather.APPID;\n  this.cityName = cityName;\n  this.stateCode = stateCode;\n  this.units = units;\n  this.lang = lang;\n}\n/**\n * GET Current Weather for a given City\n * api.openweathermap.org/data/2.5/weather?q={city name},{state code}&appid={your api key}\n * @param  {function} success callback\n * @param  {function} failed callback\n */\n;\n\nexport default FetchWeather;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/services/FetchWeather.js"],"names":["Conf","FetchWeather","cityName","stateCode","units","lang","success","failed","query","url","uri","appId","fetch","then","response","status","json","Error","data","error","api","weather","END_POINT","URI","APPID"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AAGA;;;;IAGMC,Y;AACJ;;;;;AAKA,wBAKE;AAAA;;AAAA,MAJAC,QAIA,uEAJW,OAIX;AAAA,MAHAC,SAGA,uEAHY,IAGZ;AAAA,MAFAC,KAEA,uEAFQ,QAER;AAAA,MADAC,IACA,uEADO,IACP;;AAAA;;AAAA,6CAgBkB,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAMC,KAAK,aAAM,KAAI,CAACC,GAAX,SAAiB,KAAI,CAACC,GAAtB,eAA8B,KAAI,CAACR,QAAnC,cAA+C,KAAI,CAACC,SAApD,oBAAuE,KAAI,CAACQ,KAA5E,oBAA2F,KAAI,CAACP,KAAhG,mBAA8G,KAAI,CAACC,IAAnH,CAAX;AACAO,IAAAA,KAAK,CAACJ,KAAD,CAAL,CACGK,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP,CAA7B,KACK,MAAM,IAAIC,KAAJ,CAAU,mBAAV,EAA+BH,QAA/B,CAAN;AACN,KAJH,EAKGD,IALH,CAKQ,UAACK,IAAD,EAAU;AACdZ,MAAAA,OAAO,CAACY,IAAD,CAAP;AACD,KAPH,WAQS,UAACC,KAAD,EAAW;AAChBZ,MAAAA,MAAM,CAACY,KAAD,CAAN;AACD,KAVH;AAWD,GA7BC;;AACA,OAAKV,GAAL,GAAWT,IAAI,CAACoB,GAAL,CAASC,OAAT,CAAiBC,SAA5B;AACA,OAAKZ,GAAL,GAAWV,IAAI,CAACoB,GAAL,CAASC,OAAT,CAAiBE,GAA5B;AACA,OAAKZ,KAAL,GAAaX,IAAI,CAACoB,GAAL,CAASC,OAAT,CAAiBG,KAA9B;AACA,OAAKtB,QAAL,GAAgBA,QAAhB;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD;AAED;;;;;;;;AAsBF,eAAeJ,YAAf","sourcesContent":["import Conf from \"../config/config-dev\";\n\n\n/**\n * Request api's class\n */\nclass FetchWeather {\n  /**\n   * @param {string} cityName\n   * @param {string} stateCode\n   * @param {string} units\n   */\n  constructor(\n    cityName = \"paris\",\n    stateCode = \"fr\",\n    units = \"metric\",\n    lang = \"fr\"\n  ) {\n    this.url = Conf.api.weather.END_POINT;\n    this.uri = Conf.api.weather.URI;\n    this.appId = Conf.api.weather.APPID;\n    this.cityName = cityName;\n    this.stateCode = stateCode;\n    this.units = units;\n    this.lang = lang;\n  }\n\n  /**\n   * GET Current Weather for a given City\n   * api.openweathermap.org/data/2.5/weather?q={city name},{state code}&appid={your api key}\n   * @param  {function} success callback\n   * @param  {function} failed callback\n   */\n  getCurrentWeather = (success, failed) => {\n    const query = `${this.url}${this.uri}q=${this.cityName},${this.stateCode}&appid=${this.appId}&units=${this.units}&lang=${this.lang}`;\n    fetch(query)\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error(\"response Error:  \", response);\n      })\n      .then((data) => {\n        success(data);\n      })\n      .catch((error) => {\n        failed(error);\n      });\n  };\n\n}\nexport default FetchWeather;\n"]},"metadata":{},"sourceType":"module"}