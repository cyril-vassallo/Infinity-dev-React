{"ast":null,"code":"var _jsxFileName = \"/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/three/planet/Planet.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nclass Planet extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.initScene();\n      this.createPlanetMesh(); // this.addEventListeners();\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      //this.removeEventListeners();\n      this.removeMeshes();\n    });\n\n    _defineProperty(this, \"addEventListeners\", () => {\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n    });\n\n    _defineProperty(this, \"removeEventListeners\", () => {\n      window.removeEventListener(\"resize\", this.onWindowResize, false);\n    });\n\n    _defineProperty(this, \"removeMeshes\", () => {\n      this.scene.remove(this.meshPlanet);\n      this.renderer.renderLists.dispose();\n    });\n\n    _defineProperty(this, \"initScene\", () => {\n      const fos = 50;\n      const ratio = 1;\n      const near = 0.1;\n      const far = 200000;\n      this.camera = new THREE.PerspectiveCamera(fos, ratio, near, far);\n\n      if (window.innerWidth < 500) {\n        this.distance = 2000;\n      }\n\n      this.camera.position.z = this.distance;\n      this.camera.lookAt(this.scene.position);\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setSize(300, 300);\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.canvas = document.querySelector(\"#web-gl-planet\");\n      this.canvas.appendChild(this.renderer.domElement);\n    });\n\n    _defineProperty(this, \"createPlanetMesh\", () => {\n      const texture = new THREE.TextureLoader().load(\"img/card/rock.jpg\");\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 1\n      });\n      const geometry = new THREE.SphereBufferGeometry(500, 20, 20);\n      this.meshPlanet = new THREE.Mesh(geometry, material);\n      this.meshPlanet.name = \"Planet\";\n      this.meshPlanet.position.x = 0;\n      this.meshPlanet.position.y = 0;\n      this.meshPlanet.position.z = -100;\n      this.scene.add(this.meshPlanet);\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n      this.planetAnimationManagement(this.rotatePlanet, this.stopRotatePlanet);\n      this.renderer.render(this.scene, this.camera);\n    });\n\n    _defineProperty(this, \"rotatePlanet\", () => {\n      this.animation = requestAnimationFrame(this.rotatePlanet);\n      this.meshPlanet.rotation.y += 0.002;\n      this.renderer.render(this.scene, this.camera);\n    });\n\n    _defineProperty(this, \"stopRotatePlanet\", () => {\n      if (this.isRotate) {\n        cancelAnimationFrame(this.animation);\n        this.renderer.clear();\n        this.renderer.render(this.scene, this.camera);\n      }\n    });\n\n    _defineProperty(this, \"planetAnimationManagement\", (rotatePlanet, stopRotatePlanet) => {\n      const options = {\n        root: null,\n        rootMargin: \"200px\",\n        threshold: 1.0\n      };\n\n      this.visibilityCallback = (entries, observe) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (entry.intersectionRatio > 0) {\n              if (!this.isRotate) {\n                //console.log(\"start rotate Planet\");\n                rotatePlanet();\n                this.isRotate = true;\n              }\n            }\n          } else {\n            // console.log(\"stop planet\")\n            stopRotatePlanet();\n            this.isRotate = false;\n          } //\n\n        });\n      };\n\n      const observer = new IntersectionObserver(this.visibilityCallback, options);\n      observer.observe(this.canvas);\n    });\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      this.camera.aspect = window.innerWidth / (window.innerHeight / 2);\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight / 2);\n\n      if (window.innerWidth < 500) {\n        this.isMobileDevice = true;\n\n        if (this.isMobileDevice) {\n          this.distance = 2500;\n          this.camera.position.z = this.distance;\n          this.camera.lookAt(this.scene.position);\n          this.renderer.clear();\n          this.renderer.render(this.scene, this.camera);\n        }\n      } else {\n        this.isMobileDevice = false;\n\n        if (!this.isMobileDevice) {\n          this.distance = 1200;\n          this.camera.position.z = this.distance;\n          this.camera.lookAt(this.scene.position);\n          this.renderer.clear();\n          this.renderer.render(this.scene, this.camera);\n        }\n      }\n    });\n\n    this.isMobileDevice = null;\n    this.scene = new THREE.Scene();\n    this.camera = null;\n    this.renderer = null;\n    this.canvas = null;\n    this.distance = 1200;\n    this.meshPlanet = null;\n    this.isRotate = false;\n    this.animation = null;\n  }\n  /**\n   * React\n   * Script Start Execution on component\n   */\n\n\n  /**\n   * React render method\n   */\n  render() {\n    return __jsx(\"div\", {\n      id: \"web-gl-planet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Planet;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/three/planet/Planet.jsx"],"names":["React","Component","THREE","Planet","constructor","props","initScene","createPlanetMesh","removeMeshes","window","addEventListener","onWindowResize","removeEventListener","scene","remove","meshPlanet","renderer","renderLists","dispose","fos","ratio","near","far","camera","PerspectiveCamera","innerWidth","distance","position","z","lookAt","WebGLRenderer","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","canvas","document","querySelector","appendChild","domElement","texture","TextureLoader","load","material","MeshBasicMaterial","map","opacity","geometry","SphereBufferGeometry","Mesh","name","x","y","add","planetAnimationManagement","rotatePlanet","stopRotatePlanet","render","animation","requestAnimationFrame","rotation","isRotate","cancelAnimationFrame","clear","options","root","rootMargin","threshold","visibilityCallback","entries","observe","forEach","entry","isIntersecting","intersectionRatio","observer","IntersectionObserver","aspect","innerHeight","updateProjectionMatrix","isMobileDevice","Scene"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\n\nclass Planet extends Component {\n  constructor(props) {\n    super(props);\n    this.isMobileDevice = null;\n    this.scene = new THREE.Scene();\n    this.camera = null;\n    this.renderer = null;\n    this.canvas = null;\n    this.distance = 1200;\n    this.meshPlanet = null;\n    this.isRotate = false;\n    this.animation = null;\n\n  }\n\n  /**\n   * React\n   * Script Start Execution on component\n   */\n  componentDidMount = () => {\n    this.initScene();\n    this.createPlanetMesh();\n   // this.addEventListeners();\n  };\n\n  /**\n   * React\n   * Script stop Execution of component\n   */\n  componentWillUnmount = () => {\n    //this.removeEventListeners();\n    this.removeMeshes();\n  };\n\n  /**\n   * javascript\n   * Add events to the component\n   */\n  addEventListeners = () => {\n    window.addEventListener(\"resize\", this.onWindowResize, false);\n  };\n\n  /**\n   * Javascript\n   * Remove events to the component\n   */\n  removeEventListeners = () => {\n    window.removeEventListener(\"resize\", this.onWindowResize, false);\n  };\n\n  /**\n   * Remove meshes elements and elements them self\n   */\n  removeMeshes = () => {\n    this.scene.remove(this.meshPlanet);\n    this.renderer.renderLists.dispose();\n  };\n\n  /**\n   * Three.js\n   * initScene this.scene , this.camera, this.renderer and this.canvas\n   */\n  initScene = () => {\n    const fos = 50;\n    const ratio = 1 ;\n    const near = 0.1;\n    const far = 200000;\n    this.camera = new THREE.PerspectiveCamera(fos, ratio, near, far);\n    if (window.innerWidth < 500) {\n      this.distance = 2000;\n    }\n    this.camera.position.z = this.distance;\n    this.camera.lookAt(this.scene.position);\n\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n    });\n    this.renderer.setSize(300, 300);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    this.canvas = document.querySelector(\"#web-gl-planet\");\n\n    this.canvas.appendChild(this.renderer.domElement);\n  };\n\n  /**\n   * Three.js\n   * Create and set the Planet\n   */\n  createPlanetMesh = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/rock.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 1,\n    });\n    const geometry = new THREE.SphereBufferGeometry(500, 20, 20);\n    this.meshPlanet = new THREE.Mesh(geometry, material);\n    this.meshPlanet.name = \"Planet\";\n    this.meshPlanet.position.x = 0;\n    this.meshPlanet.position.y = 0;\n    this.meshPlanet.position.z = -100;\n    this.scene.add(this.meshPlanet);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n    this.planetAnimationManagement(this.rotatePlanet, this.stopRotatePlanet);\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * three.js\n   * Rotate the planet\n   */\n  rotatePlanet = () => {\n        this.animation = requestAnimationFrame(this.rotatePlanet);\n        this.meshPlanet.rotation.y += 0.002;\n        this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * three.js\n   * Stop the planet rotate\n   */\n  stopRotatePlanet = () => {\n    if(this.isRotate){\n      cancelAnimationFrame(this.animation);\n      this.renderer.clear();\n      this.renderer.render(this.scene, this.camera);\n    }\n  };\n\n  /**\n   * Javascript -  IntersectionObserver  event\n   * Manage planet animation\n   */\n  planetAnimationManagement = (rotatePlanet, stopRotatePlanet) => {\n    const options = {\n      root: null,\n      rootMargin: \"200px\",\n      threshold: 1.0,\n    };\n    this.visibilityCallback = (entries, observe) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          if (entry.intersectionRatio > 0) {\n            if (!this.isRotate) {\n              //console.log(\"start rotate Planet\");\n              rotatePlanet();\n              this.isRotate = true;\n            }\n          }\n        } else {\n          // console.log(\"stop planet\")\n          stopRotatePlanet();\n          this.isRotate = false;\n        }\n\n        //\n      });\n    };\n    const observer = new IntersectionObserver(this.visibilityCallback, options);\n    observer.observe(this.canvas);\n  };\n\n  /**\n   * Javascript\n   * Redefine camera view and camera ration on resize event\n   */\n  onWindowResize = () => {\n    this.camera.aspect = window.innerWidth / (window.innerHeight / 2);\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight / 2);\n    if (window.innerWidth < 500) {\n      this.isMobileDevice = true;\n      if (this.isMobileDevice) {\n        this.distance = 2500;\n        this.camera.position.z = this.distance;\n        this.camera.lookAt(this.scene.position);\n        this.renderer.clear();\n        this.renderer.render(this.scene, this.camera);\n      }\n    } else {\n      this.isMobileDevice = false;\n      if (!this.isMobileDevice) {\n        this.distance = 1200;\n        this.camera.position.z = this.distance;\n        this.camera.lookAt(this.scene.position);\n        this.renderer.clear();\n        this.renderer.render(this.scene, this.camera);\n      }\n    }\n  };\n\n  /**\n   * React render method\n   */\n  render() {\n    return <div id=\"web-gl-planet\"></div>;\n  }\n}\n\nexport default Planet;\n"]},"metadata":{},"sourceType":"module"}