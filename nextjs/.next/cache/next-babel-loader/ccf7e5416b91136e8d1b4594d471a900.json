{"ast":null,"code":"var _jsxFileName = \"/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/map/Map.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport FetchAutocomplete from \"../../services/FetchAutocomplete\";\nimport Leaflet from \"leaflet\";\nimport FetchMapQuest from \"../../services/FetchMapQuest\";\nimport Conf from \"../../config/config-dev\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      this.select = document.getElementById(\"selection\");\n      document.getElementById(\"adresse\").addEventListener(\"input\", this.autocompleteAdresse, false);\n      this.displayMap();\n      this.displayMarker(\"Point de départ: Résidence de Cyril\");\n    });\n\n    _defineProperty(this, \"displayMap\", () => {\n      const token = Conf.api[\"map-box\"].APPID;\n      this.map = Leaflet.map(\"map\").setView([this.longitude, this.latitude], 13);\n      Leaflet.tileLayer(`https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}`, {\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        maxZoom: 20,\n        minZoom: 5,\n        id: \"mapbox/streets-v11\",\n        tileSize: 512,\n        zoomOffset: -1,\n        accessToken: token\n      }).addTo(this.map);\n    });\n\n    _defineProperty(this, \"displayMarker\", (popup = \"Marker\", color = \"blue\", longitude = this.longitude, latitude = this.latitude) => {\n      //delete original src from Leaflet icon in prototype\n      delete Leaflet.Icon.Default.prototype._getIconUrl; //Load new icon in local leaflet bundle in module for different devices\n\n      Leaflet.Icon.Default.mergeOptions({\n        iconRetinaUrl: require(`leaflet/dist/images/marker-icon-2x-${color}.png`),\n        iconUrl: require(`leaflet/dist/images/marker-icon-${color}.png`),\n        shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n      });\n      const marker = Leaflet.marker([longitude, latitude]).addTo(this.map);\n      marker.bindPopup(popup).openPopup();\n    });\n\n    _defineProperty(this, \"displayPolylinePath\", () => {\n      const polyline = Leaflet.polyline(this.polylinePath, {\n        color: this.pathColors[this.countPaths]\n      }).addTo(this.map);\n      this.map.fitBounds(polyline.getBounds());\n\n      if (this.countPaths === this.pathColors.length - 1) {\n        this.countPaths = 0;\n      } else {\n        this.countPaths++;\n      }\n    });\n\n    _defineProperty(this, \"fetchMapQuestSuccess\", shapePoints => {\n      const newPolylinePath = [];\n\n      for (let i = 0; i < shapePoints.length; i += 2) {\n        newPolylinePath.push([shapePoints[i], shapePoints[i + 1]]);\n\n        if (i + 1 === shapePoints.length - 1) {\n          let destination = this.road + \" \" + this.zipCode + \" \" + this.city;\n          this.displayMarker(destination, \"red\", shapePoints[i], shapePoints[i + 1]);\n        }\n      }\n\n      this.polylinePath = newPolylinePath;\n      this.displayPolylinePath();\n    });\n\n    _defineProperty(this, \"autocompleteAdresse\", async () => {\n      let inputValue = document.getElementById(\"adresse\").value;\n\n      if (inputValue) {\n        try {\n          await this.autocomplete.getAutoCompletion(inputValue, this.displaySelection);\n        } catch (error) {\n          this.select.style.display = \"block\";\n          this.select.innerHTML = \"Erreur la requête n'a pas pu aboutir :\" + error;\n        }\n      } else {\n        this.select.style.display = \"none\";\n      }\n    });\n\n    _defineProperty(this, \"displaySelection\", response => {\n      if (Object.keys(response.features).length > 0) {\n        this.select.style.display = \"block\";\n\n        if (this.select.childElementCount !== 0) {\n          this.select.removeChild(this.select.firstChild);\n        }\n\n        let ul = document.createElement(\"ul\");\n        this.select.appendChild(ul);\n        response.features.forEach(function (element) {\n          let li = document.createElement(\"li\");\n          let ligneAdresse = document.createElement(\"span\");\n          let infosAdresse = document.createTextNode(element.properties.postcode + \" \" + element.properties.city);\n          ligneAdresse.innerHTML = element.properties.name;\n          li.addEventListener(\"click\", () => {\n            document.getElementById(\"adresse\").value = element.properties.name + \" \" + element.properties.postcode + \" \" + element.properties.city;\n            document.getElementById(\"selection\").style.display = \"none\";\n            document.getElementById(\"resAdresse\").value = element.properties.name;\n            document.getElementById(\"CP\").value = element.properties.postcode;\n            document.getElementById(\"Ville\").value = element.properties.city;\n          });\n          li.appendChild(ligneAdresse);\n          li.appendChild(infosAdresse);\n          ul.appendChild(li);\n        });\n      } else {\n        this.select.style.display = \"none\";\n      }\n    });\n\n    _defineProperty(this, \"handleClickRoute\", async () => {\n      this.road = document.getElementById(\"resAdresse\").value;\n      this.zipCode = document.getElementById(\"CP\").value;\n      this.city = document.getElementById(\"Ville\").value;\n\n      try {\n        const data = await this.mapQuest.getRoute(this.road, this.zipCode, this.city);\n        this.displayNewRouteData(data);\n        const sessionId = data.route.sessionId;\n        await this.mapQuest.getShape(sessionId, this.fetchMapQuestSuccess);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    _defineProperty(this, \"displayNewRouteData\", ({\n      route\n    }) => {\n      const copyState = _objectSpread({}, this.state);\n\n      copyState.route = route;\n      this.setState(copyState);\n    });\n\n    this.select = null;\n    this.autocomplete = new FetchAutocomplete();\n    this.mapQuest = new FetchMapQuest();\n    this.map = null;\n    this.longitude = 43.64;\n    this.latitude = 3.8635;\n    this.zipCode = null;\n    this.road = null;\n    this.city = null;\n    this.polylinePath = [];\n    this.pathColors = [\"blue\", \"green\", \"red\", \"purple\"];\n    this.countPaths = 0;\n    this.state = {\n      route: null\n    };\n  }\n  /**\n   * React\n   * Execute just after the component has been mounted\n   */\n\n\n  /**\n   * React \n   * Render component\n   */\n  render() {\n    return __jsx(\"div\", {\n      className: \"container panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"row my-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, __jsx(\"h3\", {\n      className: \"text-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, \"Widget Itin\\xE9raire\"), __jsx(\"p\", {\n      className: \"my-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, \"Leaflet, MapQuest et API adresse.gouv. Une combinaison d'api et de composants gratuits pour tracer vos itin\\xE9raires.\"))), __jsx(\"div\", {\n      className: \"row my-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, \"Activit\\xE9 en r\\xE9gie ?\"), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }\n    }, \"Pour avoir une vue d'ensemble, utilisez le champ d'autocompl\\xE9tion pour tracer les itin\\xE9raires de chez moi \\xE0 vos \\xE9tablissements d'entreprise ou ceux de vos clients.\"), __jsx(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      placeholder: \"Votre adresse\",\n      id: \"adresse\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      id: \"selection\",\n      className: \"dropdown\",\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }))), __jsx(\"div\", {\n      className: \"row \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"col-md-4  m-1 text-center bg-light card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, \"Itin\\xE9raire pour :\"), __jsx(\"input\", {\n      className: \"form-control my-3\",\n      type: \"text\",\n      id: \"resAdresse\",\n      placeholder: \"adresse\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }), __jsx(\"input\", {\n      className: \"form-control my-3\",\n      type: \"text\",\n      id: \"CP\",\n      placeholder: \"code postal\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 13\n      }\n    }), __jsx(\"input\", {\n      className: \"form-control my-3 \",\n      type: \"text\",\n      id: \"Ville\",\n      placeholder: \"ville\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    }), __jsx(\"button\", {\n      onClick: this.handleClickRoute,\n      className: \"btn btn-lg btn-success my-5\",\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, \"Afficher le tracer !\"), this.state.route && __jsx(\"p\", {\n      className: \"text-success my-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 15\n      }\n    }, \"Il me faudra parcourir\", \" \", __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }\n    }, Math.trunc(this.state.route.distance * 1.60934), \" Km\"), \" en voiture pour me rendre \\xE0 votre entreprise.\")), __jsx(\"div\", {\n      className: \"col m-1 card\",\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/map/Map.jsx"],"names":["React","Component","FetchAutocomplete","Leaflet","FetchMapQuest","Conf","Map","constructor","props","select","document","getElementById","addEventListener","autocompleteAdresse","displayMap","displayMarker","token","api","APPID","map","setView","longitude","latitude","tileLayer","attribution","maxZoom","minZoom","id","tileSize","zoomOffset","accessToken","addTo","popup","color","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","marker","bindPopup","openPopup","polyline","polylinePath","pathColors","countPaths","fitBounds","getBounds","length","shapePoints","newPolylinePath","i","push","destination","road","zipCode","city","displayPolylinePath","inputValue","value","autocomplete","getAutoCompletion","displaySelection","error","style","display","innerHTML","response","Object","keys","features","childElementCount","removeChild","firstChild","ul","createElement","appendChild","forEach","element","li","ligneAdresse","infosAdresse","createTextNode","properties","postcode","name","data","mapQuest","getRoute","displayNewRouteData","sessionId","route","getShape","fetchMapQuestSuccess","console","log","copyState","state","setState","render","handleClickRoute","Math","trunc","distance"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"leaflet/dist/leaflet.css\";\nimport FetchAutocomplete from \"../../services/FetchAutocomplete\";\nimport Leaflet from \"leaflet\";\nimport FetchMapQuest from \"../../services/FetchMapQuest\";\nimport Conf from \"../../config/config-dev\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.select = null;\n    this.autocomplete = new FetchAutocomplete();\n    this.mapQuest = new FetchMapQuest();\n    this.map = null;\n    this.longitude = 43.64;\n    this.latitude = 3.8635;\n    this.zipCode = null;\n    this.road = null;\n    this.city = null;\n    this.polylinePath = [];\n    this.pathColors = [\"blue\", \"green\",\"red\",\"purple\"];\n    this.countPaths = 0;\n    this.state = {\n      route: null,\n    };\n  }\n\n  /**\n   * React\n   * Execute just after the component has been mounted\n   */\n  componentDidMount = () => {\n    this.select = document.getElementById(\"selection\");\n    document\n      .getElementById(\"adresse\")\n      .addEventListener(\"input\", this.autocompleteAdresse, false);\n    this.displayMap();\n    this.displayMarker(\"Point de départ: Résidence de Cyril\");\n  };\n\n  /**\n   * Display map with Leaflet\n   */\n  displayMap = () => {\n    const token = Conf.api[\"map-box\"].APPID;\n    this.map = Leaflet.map(\"map\").setView([this.longitude, this.latitude], 13);\n    Leaflet.tileLayer(\n      `https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}`,\n      {\n        attribution:\n          'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        maxZoom: 20,\n        minZoom: 5,\n        id: \"mapbox/streets-v11\",\n        tileSize: 512,\n        zoomOffset: -1,\n        accessToken: token,\n      }\n    ).addTo(this.map);\n  };\n\n\n  /**\n   * Display Marker method \n   * @param {string} popup \n   * @param {color} color \n   * @param {longitude} longitude \n   * @param {latitude} latitude \n   */\n  displayMarker = (\n    popup = \"Marker\",\n    color = \"blue\",\n    longitude = this.longitude,\n    latitude = this.latitude\n  ) => {\n    //delete original src from Leaflet icon in prototype\n    delete Leaflet.Icon.Default.prototype._getIconUrl;\n    //Load new icon in local leaflet bundle in module for different devices\n    Leaflet.Icon.Default.mergeOptions({\n      iconRetinaUrl: require(`leaflet/dist/images/marker-icon-2x-${color}.png`),\n      iconUrl: require(`leaflet/dist/images/marker-icon-${color}.png`),\n      shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\"),\n    });\n    const marker = Leaflet.marker([longitude, latitude]).addTo(this.map);\n    marker.bindPopup(popup).openPopup();\n  };\n\n  /**\n   * Draw the polyline according to polylinePath variable\n   */\n  displayPolylinePath = () => {\n    const polyline = Leaflet.polyline(this.polylinePath, {\n      color: this.pathColors[this.countPaths],\n    }).addTo(this.map);\n \n    this.map.fitBounds(polyline.getBounds());\n    if(this.countPaths === this.pathColors.length-1){\n      this.countPaths = 0;\n    }else{\n      this.countPaths++;\n    }\n    \n  };\n\n\n  /**\n   * Called when fetchMapQuest success\n   * @param {array} shapePoints \n   */\n  fetchMapQuestSuccess = (shapePoints) => {\n    const newPolylinePath = [];\n    for (let i = 0; i < shapePoints.length; i += 2) {\n      newPolylinePath.push([shapePoints[i], shapePoints[i + 1]]);\n      if (i + 1 === shapePoints.length - 1) {\n        let destination = this.road + \" \" + this.zipCode + \" \" + this.city;\n        this.displayMarker(\n          destination,\n          \"red\",\n          shapePoints[i],\n          shapePoints[i + 1]\n        );\n      }\n    }\n    this.polylinePath = newPolylinePath;\n    this.displayPolylinePath();\n  };\n\n  /**\n   * Fetch autocomplete api \n   */\n  autocompleteAdresse = async () => {\n    let inputValue = document.getElementById(\"adresse\").value;\n\n    if (inputValue) {\n      try {\n        await this.autocomplete.getAutoCompletion(\n          inputValue,\n          this.displaySelection\n        );\n      } catch (error) {\n        this.select.style.display = \"block\";\n        this.select.innerHTML =\n          \"Erreur la requête n'a pas pu aboutir :\" + error;\n      }\n    } else {\n      this.select.style.display = \"none\";\n    }\n  };\n\n/**\n * Display selection and fill filed when click on one item\n * Called when fetch success \n * @param {object} response \n */\n  displaySelection = (response) => {\n    if (Object.keys(response.features).length > 0) {\n      this.select.style.display = \"block\";\n      if (this.select.childElementCount !== 0) {\n        this.select.removeChild(this.select.firstChild);\n      }\n      let ul = document.createElement(\"ul\");\n      this.select.appendChild(ul);\n\n      response.features.forEach(function (element) {\n        let li = document.createElement(\"li\");\n        let ligneAdresse = document.createElement(\"span\");\n        let infosAdresse = document.createTextNode(\n          element.properties.postcode + \" \" + element.properties.city\n        );\n\n        ligneAdresse.innerHTML = element.properties.name;\n        li.addEventListener(\"click\", () => {\n          document.getElementById(\"adresse\").value =\n            element.properties.name +\n            \" \" +\n            element.properties.postcode +\n            \" \" +\n            element.properties.city;\n          document.getElementById(\"selection\").style.display = \"none\";\n\n          document.getElementById(\"resAdresse\").value = element.properties.name;\n          document.getElementById(\"CP\").value = element.properties.postcode;\n          document.getElementById(\"Ville\").value = element.properties.city;\n        });\n        li.appendChild(ligneAdresse);\n        li.appendChild(infosAdresse);\n        ul.appendChild(li);\n      });\n    } else {\n      this.select.style.display = \"none\";\n    }\n  };\n\n  /**\n   * Event on click\n   * Fetch MapQuest api to get the route direction and then related shapes according\n   */\n  handleClickRoute = async () => {\n    this.road = document.getElementById(\"resAdresse\").value;\n    this.zipCode = document.getElementById(\"CP\").value;\n    this.city = document.getElementById(\"Ville\").value;\n    try {\n      const data = await this.mapQuest.getRoute(\n        this.road,\n        this.zipCode,\n        this.city\n      );\n      this.displayNewRouteData(data);\n      const sessionId = data.route.sessionId;\n      await this.mapQuest.getShape(sessionId, this.fetchMapQuestSuccess);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /**\n   * Set a new route data in state\n   * @param {object} data  \n   */\n  displayNewRouteData = ({ route }) => {\n    const copyState = { ...this.state };\n    copyState.route = route;\n    this.setState(copyState);\n  };\n\n  /**\n   * React \n   * Render component\n   */\n  render() {\n    return (\n      <div className=\"container panel\">\n        <div className=\"row my-5\">\n          <div className=\"col\">\n            <h3 className=\"text-primary\">Widget Itinéraire</h3>\n            <p className=\"my-5\">\n              Leaflet, MapQuest et API adresse.gouv. Une combinaison d'api et de\n              composants gratuits pour tracer vos itinéraires.\n            </p>\n          </div>\n        </div>\n        <div className=\"row my-5\">\n          <div className=\"col\">\n            <p>Activité en régie ?</p>\n            <p>\n              Pour avoir une vue d'ensemble, utilisez le champ d'autocomplétion\n              pour tracer les itinéraires de chez moi à vos établissements\n              d'entreprise ou ceux de vos clients.\n            </p>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              placeholder=\"Votre adresse\"\n              id=\"adresse\"\n            />\n            <div\n              id=\"selection\"\n              className=\"dropdown\"\n              style={{ display: \"none\" }}\n            ></div>\n          </div>\n        </div>\n        <div className=\"row \">\n          <div className=\"col-md-4  m-1 text-center bg-light card\">\n            <p>Itinéraire pour :</p>\n            <input\n              className=\"form-control my-3\"\n              type=\"text\"\n              id=\"resAdresse\"\n              placeholder=\"adresse\"\n              disabled\n            />\n            <input\n              className=\"form-control my-3\"\n              type=\"text\"\n              id=\"CP\"\n              placeholder=\"code postal\"\n              disabled\n            />\n\n            <input\n              className=\"form-control my-3 \"\n              type=\"text\"\n              id=\"Ville\"\n              placeholder=\"ville\"\n              disabled\n            />\n            <button\n              onClick={this.handleClickRoute}\n              className=\"btn btn-lg btn-success my-5\"\n              type=\"button\"\n            >\n              Afficher le tracer !\n            </button>\n            {this.state.route && (\n              <p className=\"text-success my-3\">\n                Il me faudra parcourir{\" \"}\n                <b>{Math.trunc(this.state.route.distance * 1.60934)} Km</b> en\n                voiture pour me rendre à votre entreprise.\n              </p>\n            )}\n          </div>\n          <div className=\"col m-1 card\" id=\"map\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}