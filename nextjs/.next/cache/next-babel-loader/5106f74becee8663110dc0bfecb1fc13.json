{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/three/scene/Scene.jsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { NavLink } from \"react-router-dom\"; //import { openFullscreen, closeFullscreen } from \"../../../services/utils\";\n\nvar Scene = /*#__PURE__*/function (_Component) {\n  _inherits(Scene, _Component);\n\n  var _super = _createSuper(Scene);\n\n  function Scene() {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"test\", function () {\n      _this.removeMeshes();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentDidMount\", function () {\n      // openFullscreen();\n      _this.audioElement = new Audio(\"media/music/Gamma.mp3\");\n\n      _this.audioElement.play();\n\n      _this.initScene();\n\n      _this.createSunMesh();\n\n      _this.createPlanetMesh();\n\n      _this.createCardMesh();\n\n      _this.createRockMeshes();\n\n      _this.rotatePlanet();\n\n      _this.rotateCard();\n\n      _this.rotateRocks();\n\n      _this.rotateSun();\n\n      _this.addEventListeners();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"componentWillUnmount\", function () {\n      _this.audioElement.pause();\n\n      _this.removeEventListeners();\n\n      _this.removeMeshes(); // closeFullscreen();\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeMeshes\", function () {\n      _this.scene.remove(_this.meshCard).remove(_this.meshPlanet).remove(_this.meshSun);\n\n      _this.meshRocks.forEach(function (rock) {\n        _this.scene.remove(rock);\n      });\n\n      _this.renderer.renderLists.dispose();\n\n      _this.renderer.clear();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeEventListeners\", function () {\n      _this.canvas.removeEventListener(\"mousemove\", _this.handleMouseMove, false);\n\n      window.removeEventListener(\"resize\", _this.handleWindowResize, false);\n\n      _this.canvas.removeEventListener(\"wheel\", _this.handleMouseRoll, false);\n\n      _this.canvas.removeEventListener(\"dblclick\", _this.handleDoubleClick, false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"addEventListeners\", function () {\n      _this.canvas.addEventListener(\"mousemove\", _this.handleMouseMove, false);\n\n      window.addEventListener(\"resize\", _this.handleWindowResize, false);\n\n      _this.canvas.addEventListener(\"wheel\", _this.handleMouseRoll, false);\n\n      _this.canvas.addEventListener(\"dblclick\", _this.handleDoubleClick, false);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initScene\", function () {\n      var fos = 50;\n      var ratio = window.innerWidth / window.innerHeight;\n      var near = 0.1;\n      var far = 200000;\n      _this.camera = new THREE.PerspectiveCamera(fos, ratio, near, far);\n\n      if (window.innerWidth < 500) {\n        _this.distance = 1400;\n      }\n\n      _this.camera.position.z = _this.distance;\n\n      _this.camera.lookAt(_this.scene.position);\n\n      _this.renderer = new THREE.WebGLRenderer({\n        autoClear: true,\n        antialias: true,\n        alpha: true\n      });\n\n      _this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n      _this.renderer.setPixelRatio(window.devicePixelRatio);\n\n      _this.canvas = document.querySelector(\"#web-gl-scene\");\n\n      _this.canvas.appendChild(_this.renderer.domElement);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createCardMesh\", function () {\n      var length = 100,\n          width = 60,\n          depth = 1,\n          path = \"img/card/\",\n          format = \".png\";\n      var url = \"card\" + format; // [\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      // ]\n\n      var texture = new THREE.TextureLoader().setPath(path).load(url);\n      var geometry = new THREE.BoxGeometry(length, width, depth); //A material need texture or a basic material\n\n      var material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 0.50\n      }); //A Mesh need a geometry and material object\n\n      _this.meshCard = new THREE.Mesh(geometry, material);\n      _this.meshCard.name = \"Card\";\n      _this.meshCard.position.x = 0;\n      _this.meshCard.position.y = 0;\n      _this.meshCard.position.z = 1050;\n\n      _this.scene.add(_this.meshCard);\n\n      _this.renderer.render(_this.scene, _this.camera);\n\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createRockMeshes\", function () {\n      var texture = new THREE.TextureLoader().load(\"img/card/rock.jpg\");\n      var material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 0.5\n      });\n      var max = 2000;\n      var maxSize = Math.floor(Math.random() * Math.floor(200));\n\n      for (var i = 0; i < Math.floor(Math.random() * Math.floor(10)); i++) {\n        var geometry = new THREE.SphereBufferGeometry(Math.random() * Math.floor(maxSize), 8, 8); //A material need texture or a basic material\n        //A Mesh need a geometry and material object\n\n        var meshRock = new THREE.Mesh(geometry, material);\n        meshRock.position.x = Math.floor(Math.random() * Math.floor(max) - window.innerWidth);\n        meshRock.position.y = Math.floor(Math.random() * Math.floor(max) - window.innerHeight);\n        meshRock.position.z = Math.floor(Math.random() * Math.floor(max) - 600);\n        meshRock.name = \"Rock\" + i;\n\n        _this.scene.add(meshRock);\n\n        _this.meshRocks.push(meshRock);\n\n        geometry.dispose();\n      }\n\n      material.dispose();\n      texture.dispose();\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createPlanetMesh\", function () {\n      var texture = new THREE.TextureLoader().load(\"img/card/earth-night.jpg\");\n      var material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 1\n      });\n      var geometry = new THREE.SphereBufferGeometry(500, 20, 20);\n      _this.meshPlanet = new THREE.Mesh(geometry, material);\n      _this.meshPlanet.name = \"Planet\";\n      _this.meshPlanet.position.x = 500;\n      _this.meshPlanet.position.y = 0;\n      _this.meshPlanet.position.z = -1000;\n\n      _this.scene.add(_this.meshPlanet);\n\n      _this.renderer.render(_this.scene, _this.camera);\n\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"createSunMesh\", function () {\n      var texture = new THREE.TextureLoader().load(\"img/card/sun.jpg\");\n      var material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 1\n      });\n      var geometry = new THREE.SphereBufferGeometry(15000, 30, 30);\n      _this.meshSun = new THREE.Mesh(geometry, material);\n      _this.meshSun.name = \"Sun\";\n      _this.meshSun.position.x = 15000;\n      _this.meshSun.position.y = 0;\n      _this.meshSun.position.z = -15000;\n\n      _this.scene.add(_this.meshSun);\n\n      _this.renderer.render(_this.scene, _this.camera);\n\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDoubleClick\", function () {\n      _this.camera.position.z = _this.distance;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseRoll\", function () {\n      _this.camera.position.z += 5;\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleMouseMove\", function (e) {\n      var mouseX = (e.clientX - window.innerWidth / 2) * 0.1;\n      var mouseY = (e.clientY - window.innerHeight / 2) * 0.1;\n      _this.camera.position.x = mouseX;\n      _this.camera.position.y = -mouseY;\n\n      _this.camera.lookAt(_this.scene.position);\n\n      _this.renderer.render(_this.scene, _this.camera);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleWindowResize\", function () {\n      _this.camera.aspect = window.innerWidth / window.innerHeight;\n\n      _this.camera.updateProjectionMatrix();\n\n      _this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n      if (window.innerWidth < 500) {\n        _this.isMobileDevice = true;\n\n        if (_this.isMobileDevice) {\n          _this.distance = 1500;\n          _this.camera.position.z = _this.distance;\n\n          _this.camera.lookAt(_this.scene.position);\n\n          _this.renderer.render(_this.scene, _this.camera);\n        }\n      } else {\n        _this.isMobileDevice = false;\n\n        if (!_this.isMobileDevice) {\n          _this.distance = 1200;\n          _this.camera.position.z = _this.distance;\n\n          _this.camera.lookAt(_this.scene.position);\n\n          _this.renderer.render(_this.scene, _this.camera);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rotateCard\", function () {\n      setTimeout(function () {\n        requestAnimationFrame(_this.rotateCard);\n        _this.meshCard.rotation.x = 0.5;\n        _this.meshCard.rotation.y += 0.01;\n        _this.meshCard.rotation.z = 0.5;\n\n        _this.renderer.render(_this.scene, _this.camera);\n      }, 60);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rotatePlanet\", function () {\n      setTimeout(function () {\n        requestAnimationFrame(_this.rotatePlanet);\n        _this.meshPlanet.rotation.y += 0.005;\n\n        _this.renderer.render(_this.scene, _this.camera);\n      }, 60);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rotateSun\", function () {\n      setTimeout(function () {\n        requestAnimationFrame(_this.rotateSun);\n        _this.meshSun.rotation.y += 0.0001;\n\n        _this.renderer.render(_this.scene, _this.camera);\n      }, 1000);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rotateRocks\", function () {\n      setTimeout(function () {\n        requestAnimationFrame(_this.rotateRocks);\n\n        _this.meshRocks.forEach(function (meshRock) {\n          meshRock.rotation.x += 0.01;\n          meshRock.rotation.y += 0.005;\n\n          _this.renderer.render(_this.scene, _this.camera);\n        });\n      }, 100);\n    });\n\n    _this.audioElement = null;\n    _this.isMobileDevice = null;\n    _this.scene = new THREE.Scene();\n    _this.camera = null;\n    _this.renderer = null;\n    _this.canvas = null;\n    _this.distance = 1200;\n    _this.meshCard = null;\n    _this.meshSun = null;\n    _this.meshPlanet = null;\n    _this.meshRocks = [];\n    return _this;\n  }\n  /**\n   * Test Method\n   */\n\n\n  _createClass(Scene, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"web-gl-scene\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 7\n        }\n      }, __jsx(NavLink, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        src: \"svg/close.svg\",\n        alt: \"return to home\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return Scene;\n}(Component);\n\nexport default Scene;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/three/scene/Scene.jsx"],"names":["React","Component","THREE","NavLink","Scene","removeMeshes","audioElement","Audio","play","initScene","createSunMesh","createPlanetMesh","createCardMesh","createRockMeshes","rotatePlanet","rotateCard","rotateRocks","rotateSun","addEventListeners","pause","removeEventListeners","scene","remove","meshCard","meshPlanet","meshSun","meshRocks","forEach","rock","renderer","renderLists","dispose","clear","canvas","removeEventListener","handleMouseMove","window","handleWindowResize","handleMouseRoll","handleDoubleClick","addEventListener","fos","ratio","innerWidth","innerHeight","near","far","camera","PerspectiveCamera","distance","position","z","lookAt","WebGLRenderer","autoClear","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","document","querySelector","appendChild","domElement","length","width","depth","path","format","url","texture","TextureLoader","setPath","load","geometry","BoxGeometry","material","MeshBasicMaterial","map","opacity","Mesh","name","x","y","add","render","max","maxSize","Math","floor","random","i","SphereBufferGeometry","meshRock","push","e","mouseX","clientX","mouseY","clientY","aspect","updateProjectionMatrix","isMobileDevice","setTimeout","requestAnimationFrame","rotation"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { NavLink } from \"react-router-dom\";\n//import { openFullscreen, closeFullscreen } from \"../../../services/utils\";\n\nclass Scene extends Component {\n  constructor() {\n    super();\n    this.audioElement = null;\n    this.isMobileDevice = null;\n    this.scene = new THREE.Scene();\n    this.camera = null;\n    this.renderer = null;\n    this.canvas = null;\n    this.distance = 1200;\n    this.meshCard = null;\n    this.meshSun = null;\n    this.meshPlanet = null;\n    this.meshRocks = [];\n  }\n\n  /**\n   * Test Method\n   */\n  test = () => {\n    this.removeMeshes();\n  };\n\n  /**\n   * Script Start Execution on component\n   */\n  componentDidMount = () => {\n    // openFullscreen();\n    this.audioElement = new Audio(\"media/music/Gamma.mp3\")\n    this.audioElement.play();\n    this.initScene();\n    this.createSunMesh();\n    this.createPlanetMesh();\n    this.createCardMesh();\n    this.createRockMeshes();\n    this.rotatePlanet();\n    this.rotateCard();\n    this.rotateRocks();\n    this.rotateSun();\n    this.addEventListeners();\n\n  };\n\n  /**\n   * Script stop Execution on component\n   */\n  componentWillUnmount = () => {\n    this.audioElement.pause();\n    this.removeEventListeners();\n    this.removeMeshes();\n    // closeFullscreen();\n  };\n\n  /**\n   * Three.js\n   * remove Mesh and  them components from the scene\n   */\n  removeMeshes = () => {\n    this.scene\n      .remove(this.meshCard)\n      .remove(this.meshPlanet)\n      .remove(this.meshSun);\n    this.meshRocks.forEach((rock)=> {\n      this.scene.remove(rock)\n    });\n    this.renderer.renderLists.dispose();\n    this.renderer.clear();\n  };\n\n  /**\n   * Remove all scene events\n   */\n  removeEventListeners = () => {\n    this.canvas.removeEventListener(\"mousemove\", this.handleMouseMove, false);\n    window.removeEventListener(\"resize\", this.handleWindowResize, false);\n    this.canvas.removeEventListener(\"wheel\", this.handleMouseRoll, false);\n    this.canvas.removeEventListener(\"dblclick\", this.handleDoubleClick, false);\n  };\n\n  /**\n   * add all scene events\n   */\n  addEventListeners = () => {\n    this.canvas.addEventListener(\"mousemove\", this.handleMouseMove, false);\n    window.addEventListener(\"resize\", this.handleWindowResize, false);\n    this.canvas.addEventListener(\"wheel\", this.handleMouseRoll, false);\n    this.canvas.addEventListener(\"dblclick\", this.handleDoubleClick, false);\n  };\n\n  /**\n   * Initialize this.scene , this.camera, this.renderer and this.canvas\n   */\n  initScene = () => {\n    const fos = 50;\n    const ratio = window.innerWidth / window.innerHeight;\n    const near = 0.1;\n    const far = 200000;\n    this.camera = new THREE.PerspectiveCamera(fos, ratio, near, far);\n    if (window.innerWidth < 500) {\n      this.distance = 1400;\n    }\n    this.camera.position.z = this.distance;\n    this.camera.lookAt(this.scene.position);\n\n    this.renderer = new THREE.WebGLRenderer({\n      autoClear: true,\n      antialias: true,\n      alpha: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    this.canvas = document.querySelector(\"#web-gl-scene\");\n\n    this.canvas.appendChild(this.renderer.domElement);\n  };\n\n  /**\n   * Create and render Elements\n   */\n  createCardMesh = () => {\n    const length = 100,\n      width = 60,\n      depth = 1,\n      path = \"img/card/\",\n      format = \".png\";\n    const url = \"card\" + format; // [\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    // ]\n    const texture = new THREE.TextureLoader().setPath(path).load(url);\n\n    const geometry = new THREE.BoxGeometry(length, width, depth);\n\n    //A material need texture or a basic material\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 0.50,\n    });\n\n    //A Mesh need a geometry and material object\n    this.meshCard = new THREE.Mesh(geometry, material);\n    this.meshCard.name = \"Card\";\n    this.meshCard.position.x = 0;\n    this.meshCard.position.y = 0;\n    this.meshCard.position.z = 1050;\n    this.scene.add(this.meshCard);\n    this.renderer.render(this.scene, this.camera);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  };\n\n  /**\n   * Create and render Elements\n   */\n  createRockMeshes = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/rock.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 0.5,\n    });\n    const max = 2000;\n    const maxSize = Math.floor(Math.random() * Math.floor(200));\n    for (let i = 0; i < Math.floor(Math.random() * Math.floor(10)); i++) {\n      const geometry = new THREE.SphereBufferGeometry(\n        Math.random() * Math.floor(maxSize),\n        8,\n        8\n      );\n      //A material need texture or a basic material\n\n      //A Mesh need a geometry and material object\n      const meshRock = new THREE.Mesh(geometry, material);\n      meshRock.position.x = Math.floor(\n        Math.random() * Math.floor(max) - window.innerWidth\n      );\n      meshRock.position.y = Math.floor(\n        Math.random() * Math.floor(max) - window.innerHeight\n      );\n      meshRock.position.z = Math.floor(Math.random() * Math.floor(max) - 600);\n      meshRock.name = \"Rock\" + i;\n      this.scene.add(meshRock);\n      this.meshRocks.push(meshRock);\n      geometry.dispose();\n    }\n    material.dispose();\n    texture.dispose();\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  createPlanetMesh = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/earth-night.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 1,\n    });\n    const geometry = new THREE.SphereBufferGeometry(500, 20, 20);\n    this.meshPlanet = new THREE.Mesh(geometry, material);\n    this.meshPlanet.name = \"Planet\";\n    this.meshPlanet.position.x = 500;\n    this.meshPlanet.position.y = 0;\n    this.meshPlanet.position.z = -1000;\n    this.scene.add(this.meshPlanet);\n       this.renderer.render(this.scene, this.camera);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  };\n\n  createSunMesh = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/sun.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 1,\n    });\n    const geometry = new THREE.SphereBufferGeometry(15000, 30, 30);\n    this.meshSun = new THREE.Mesh(geometry, material);\n    this.meshSun.name = \"Sun\";\n    this.meshSun.position.x = 15000;\n    this.meshSun.position.y = 0;\n    this.meshSun.position.z = -15000;\n    this.scene.add(this.meshSun);\n    this.renderer.render(this.scene, this.camera);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  };\n\n  /**\n   * Manage mouse roll effect\n   */\n  handleDoubleClick = () => {\n    this.camera.position.z = this.distance;\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n  /**\n   * Manage mouse roll effect\n   */\n  handleMouseRoll = () => {\n    this.camera.position.z += 5;\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * Manage animations mouse mouve effect\n   */\n  handleMouseMove = (e) => {\n    const mouseX = (e.clientX - window.innerWidth / 2) * 0.1;\n    const mouseY = (e.clientY - window.innerHeight / 2) * 0.1;\n    this.camera.position.x = mouseX;\n    this.camera.position.y = -mouseY;\n    this.camera.lookAt(this.scene.position);\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * Manage camera aspect on window resize\n   */\n  handleWindowResize = () => {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    if (window.innerWidth < 500) {\n      this.isMobileDevice = true;\n      if (this.isMobileDevice) {\n        this.distance = 1500;\n        this.camera.position.z = this.distance;\n        this.camera.lookAt(this.scene.position);\n        this.renderer.render(this.scene, this.camera);\n      }\n    } else {\n      this.isMobileDevice = false;\n      if (!this.isMobileDevice) {\n        this.distance = 1200;\n        this.camera.position.z = this.distance;\n        this.camera.lookAt(this.scene.position);\n        this.renderer.render(this.scene, this.camera);\n      }\n    }\n  };\n\n  /*Make the mesh rotate */\n  rotateCard = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotateCard);\n      this.meshCard.rotation.x = 0.5;\n      this.meshCard.rotation.y += 0.01;\n      this.meshCard.rotation.z = 0.5;\n      this.renderer.render(this.scene, this.camera);\n    }, 60);\n  };\n\n  /** Make the planet rotate */\n  rotatePlanet = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotatePlanet);\n      this.meshPlanet.rotation.y += 0.005;\n      this.renderer.render(this.scene, this.camera);\n    }, 60);\n  };\n\n  /**Make the sun rotate */\n  rotateSun = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotateSun);\n      this.meshSun.rotation.y += 0.0001;\n      this.renderer.render(this.scene, this.camera);\n    }, 1000);\n  };\n\n  /** Make the rocks rotate*/\n  rotateRocks = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotateRocks);\n      this.meshRocks.forEach((meshRock) => {\n        meshRock.rotation.x += 0.01;\n        meshRock.rotation.y += 0.005;\n        this.renderer.render(this.scene, this.camera);\n      });\n    }, 100);\n  };\n\n  render() {\n    return (\n      <div id=\"web-gl-scene\">\n        <NavLink to=\"/\">\n          <img src=\"svg/close.svg\" alt=\"return to home\" />\n        </NavLink>\n      </div>\n     \n    );\n  }\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}