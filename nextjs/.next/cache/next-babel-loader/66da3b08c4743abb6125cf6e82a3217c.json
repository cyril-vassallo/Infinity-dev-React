{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Conf from \"../config/config-dev\";\n/**\n * Request MAPQUEST route\n */\n\nclass FetchMapQuest {\n  constructor() {\n    _defineProperty(this, \"getRoute\", (road, zipCode, city) => {\n      let to = `${road}%2C+${zipCode}%20+${city}%2C+france`;\n      let query = `${Conf.api[\"map-quest\"].END_POINT}${Conf.api[\"map-quest\"].URI_ROUTE}key=${this.key}&from=${this.from}&to=${to}&outFormat=json&ambiguities=ignore&routeType=fastest&doReverseGeocode=false&enhancedNarrative=false&avoidTimedConditions=false`;\n      return fetch(query).then(response => {\n        if (response.status === 200) return response.json();else throw new Error(\"Problème de réponse \", response);\n      }).then(data => {\n        //console.log(\"Data: \", data);\n        return data;\n      });\n    });\n\n    _defineProperty(this, \"getShape\", (sessionId, fetchMapQuestSuccess) => {\n      const query = `${Conf.api[\"map-quest\"].END_POINT}${Conf.api[\"map-quest\"].URI_SHAPE}key=${this.key}&sessionId=${sessionId}&fullShape=true`;\n      return fetch(query).then(response => {\n        if (response.status === 200) return response.json();else throw new Error(\"Problème de réponse \", response);\n      }).then(data => {\n        //console.log(\"Data: \", data);\n        fetchMapQuestSuccess(data.route.shape.shapePoints);\n      });\n    });\n\n    this.key = Conf.api[\"map-quest\"].APPID;\n    this.from = \"2153+route+de+Mende%2C+34090+Montpellier%2C+france\";\n  }\n  /**\n   * Fetch to get route sessionID\n   * @param {string} road\n   * @param {string} zipCode\n   * @param {string} city\n   */\n\n\n}\n\nexport default FetchMapQuest;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/services/FetchMapQuest.js"],"names":["Conf","FetchMapQuest","constructor","road","zipCode","city","to","query","api","END_POINT","URI_ROUTE","key","from","fetch","then","response","status","json","Error","data","sessionId","fetchMapQuestSuccess","URI_SHAPE","route","shape","shapePoints","APPID"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AAEA;;;;AAGA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,GAAG;AAAA,sCAWH,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,KAAyB;AAClC,UAAIC,EAAE,GAAI,GAAEH,IAAK,OAAMC,OAAQ,OAAMC,IAAK,YAA1C;AACA,UAAIE,KAAK,GAAI,GAAEP,IAAI,CAACQ,GAAL,CAAS,WAAT,EAAsBC,SAAU,GAAET,IAAI,CAACQ,GAAL,CAAS,WAAT,EAAsBE,SAAU,OAAM,KAAKC,GAAI,SAAQ,KAAKC,IAAK,OAAMN,EAAG,gIAA3H;AAEA,aAAOO,KAAK,CAACN,KAAD,CAAL,CACJO,IADI,CACEC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP,CAA7B,KACK,MAAM,IAAIC,KAAJ,CAAU,sBAAV,EAAkCH,QAAlC,CAAN;AACN,OAJI,EAKJD,IALI,CAKEK,IAAD,IAAU;AACd;AACA,eAAOA,IAAP;AACD,OARI,CAAP;AASD,KAxBa;;AAAA,sCA+BH,CAACC,SAAD,EAAYC,oBAAZ,KAAqC;AAC9C,YAAMd,KAAK,GAAI,GAAEP,IAAI,CAACQ,GAAL,CAAS,WAAT,EAAsBC,SAAU,GAAET,IAAI,CAACQ,GAAL,CAAS,WAAT,EAAsBc,SAAU,OAAM,KAAKX,GAAI,cAAaS,SAAU,iBAAzH;AACA,aAAOP,KAAK,CAACN,KAAD,CAAL,CACJO,IADI,CACEC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP,CAA7B,KACK,MAAM,IAAIC,KAAJ,CAAU,sBAAV,EAAkCH,QAAlC,CAAN;AACN,OAJI,EAKJD,IALI,CAKEK,IAAD,IAAU;AACd;AACAE,QAAAA,oBAAoB,CAACF,IAAI,CAACI,KAAL,CAAWC,KAAX,CAAiBC,WAAlB,CAApB;AACD,OARI,CAAP;AASD,KA1Ca;;AACZ,SAAKd,GAAL,GAAWX,IAAI,CAACQ,GAAL,CAAS,WAAT,EAAsBkB,KAAjC;AACA,SAAKd,IAAL,GAAY,oDAAZ;AACD;AAED;;;;;;;;AANkB;;AA6CpB,eAAeX,aAAf","sourcesContent":["import Conf from \"../config/config-dev\";\n\n/**\n * Request MAPQUEST route\n */\nclass FetchMapQuest {\n  constructor() {\n    this.key = Conf.api[\"map-quest\"].APPID;\n    this.from = \"2153+route+de+Mende%2C+34090+Montpellier%2C+france\";\n  }\n\n  /**\n   * Fetch to get route sessionID\n   * @param {string} road\n   * @param {string} zipCode\n   * @param {string} city\n   */\n  getRoute = (road, zipCode, city) => {\n    let to = `${road}%2C+${zipCode}%20+${city}%2C+france`;\n    let query = `${Conf.api[\"map-quest\"].END_POINT}${Conf.api[\"map-quest\"].URI_ROUTE}key=${this.key}&from=${this.from}&to=${to}&outFormat=json&ambiguities=ignore&routeType=fastest&doReverseGeocode=false&enhancedNarrative=false&avoidTimedConditions=false`;\n\n    return fetch(query)\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error(\"Problème de réponse \", response);\n      })\n      .then((data) => {\n        //console.log(\"Data: \", data);\n        return data;\n      });\n  };\n\n  /**\n   * Fetch to get route shape\n   * @param {string} sessionId\n   * @param {function} fetchMapQuestSuccess\n   */\n  getShape = (sessionId, fetchMapQuestSuccess) => {\n    const query = `${Conf.api[\"map-quest\"].END_POINT}${Conf.api[\"map-quest\"].URI_SHAPE}key=${this.key}&sessionId=${sessionId}&fullShape=true`;\n    return fetch(query)\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error(\"Problème de réponse \", response);\n      })\n      .then((data) => {\n        //console.log(\"Data: \", data);\n        fetchMapQuestSuccess(data.route.shape.shapePoints);\n      });\n  };\n}\nexport default FetchMapQuest;\n"]},"metadata":{},"sourceType":"module"}