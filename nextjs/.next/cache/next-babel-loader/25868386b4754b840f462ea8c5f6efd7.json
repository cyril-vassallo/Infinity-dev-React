{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Conf from \"../config/config-dev\";\n/**\n * Request api's class\n */\n\nclass FetchWeather {\n  /**\n   * @param {string} cityName\n   * @param {string} stateCode\n   * @param {string} units\n   */\n  constructor(cityName = \"paris\", stateCode = \"fr\", units = \"metric\", lang = \"fr\") {\n    _defineProperty(this, \"getCurrentWeather\", (success, failed) => {\n      const query = `${this.url}${this.uri}q=${this.cityName},${this.stateCode}&appid=${this.appId}&units=${this.units}&lang=${this.lang}`;\n      fetch(query).then(response => {\n        if (response.status === 200) return response.json();else throw new Error(\"response Error:  \", response);\n      }).then(data => {\n        success(data);\n      }).catch(error => {\n        failed(error);\n      });\n    });\n\n    this.url = Conf.api.weather.END_POINT;\n    this.uri = Conf.api.weather.URI;\n    this.appId = Conf.api.weather.APPID;\n    this.cityName = cityName;\n    this.stateCode = stateCode;\n    this.units = units;\n    this.lang = lang;\n  }\n  /**\n   * GET Current Weather for a given City\n   * api.openweathermap.org/data/2.5/weather?q={city name},{state code}&appid={your api key}\n   * @param  {function} success callback\n   * @param  {function} failed callback\n   */\n\n\n}\n\nexport default FetchWeather;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/services/FetchWeather.js"],"names":["Conf","FetchWeather","constructor","cityName","stateCode","units","lang","success","failed","query","url","uri","appId","fetch","then","response","status","json","Error","data","catch","error","api","weather","END_POINT","URI","APPID"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AAGA;;;;AAGA,MAAMC,YAAN,CAAmB;AACjB;;;;;AAKAC,EAAAA,WAAW,CACTC,QAAQ,GAAG,OADF,EAETC,SAAS,GAAG,IAFH,EAGTC,KAAK,GAAG,QAHC,EAITC,IAAI,GAAG,IAJE,EAKT;AAAA,+CAgBkB,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC,YAAMC,KAAK,GAAI,GAAE,KAAKC,GAAI,GAAE,KAAKC,GAAI,KAAI,KAAKR,QAAS,IAAG,KAAKC,SAAU,UAAS,KAAKQ,KAAM,UAAS,KAAKP,KAAM,SAAQ,KAAKC,IAAK,EAAnI;AACAO,MAAAA,KAAK,CAACJ,KAAD,CAAL,CACGK,IADH,CACSC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP,CAA7B,KACK,MAAM,IAAIC,KAAJ,CAAU,mBAAV,EAA+BH,QAA/B,CAAN;AACN,OAJH,EAKGD,IALH,CAKSK,IAAD,IAAU;AACdZ,QAAAA,OAAO,CAACY,IAAD,CAAP;AACD,OAPH,EAQGC,KARH,CAQUC,KAAD,IAAW;AAChBb,QAAAA,MAAM,CAACa,KAAD,CAAN;AACD,OAVH;AAWD,KA7BC;;AACA,SAAKX,GAAL,GAAWV,IAAI,CAACsB,GAAL,CAASC,OAAT,CAAiBC,SAA5B;AACA,SAAKb,GAAL,GAAWX,IAAI,CAACsB,GAAL,CAASC,OAAT,CAAiBE,GAA5B;AACA,SAAKb,KAAL,GAAaZ,IAAI,CAACsB,GAAL,CAASC,OAAT,CAAiBG,KAA9B;AACA,SAAKvB,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;AAED;;;;;;;;AArBiB;;AA2CnB,eAAeL,YAAf","sourcesContent":["import Conf from \"../config/config-dev\";\n\n\n/**\n * Request api's class\n */\nclass FetchWeather {\n  /**\n   * @param {string} cityName\n   * @param {string} stateCode\n   * @param {string} units\n   */\n  constructor(\n    cityName = \"paris\",\n    stateCode = \"fr\",\n    units = \"metric\",\n    lang = \"fr\"\n  ) {\n    this.url = Conf.api.weather.END_POINT;\n    this.uri = Conf.api.weather.URI;\n    this.appId = Conf.api.weather.APPID;\n    this.cityName = cityName;\n    this.stateCode = stateCode;\n    this.units = units;\n    this.lang = lang;\n  }\n\n  /**\n   * GET Current Weather for a given City\n   * api.openweathermap.org/data/2.5/weather?q={city name},{state code}&appid={your api key}\n   * @param  {function} success callback\n   * @param  {function} failed callback\n   */\n  getCurrentWeather = (success, failed) => {\n    const query = `${this.url}${this.uri}q=${this.cityName},${this.stateCode}&appid=${this.appId}&units=${this.units}&lang=${this.lang}`;\n    fetch(query)\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error(\"response Error:  \", response);\n      })\n      .then((data) => {\n        success(data);\n      })\n      .catch((error) => {\n        failed(error);\n      });\n  };\n\n}\nexport default FetchWeather;\n"]},"metadata":{},"sourceType":"module"}