{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Conf from \"../config/config-dev\";\n/**\n * Request MAPQUEST route\n */\n\nvar FetchMapQuest = function FetchMapQuest() {\n  var _this = this;\n\n  _classCallCheck(this, FetchMapQuest);\n\n  _defineProperty(this, \"getRoute\", function (road, zipCode, city) {\n    var to = \"\".concat(road, \"%2C+\").concat(zipCode, \"%20+\").concat(city, \"%2C+france\");\n    var query = \"\".concat(Conf.api[\"map-quest\"].END_POINT).concat(Conf.api[\"map-quest\"].URI_ROUTE, \"key=\").concat(_this.key, \"&from=\").concat(_this.from, \"&to=\").concat(to, \"&outFormat=json&ambiguities=ignore&routeType=fastest&doReverseGeocode=false&enhancedNarrative=false&avoidTimedConditions=false\");\n    return fetch(query).then(function (response) {\n      if (response.status === 200) return response.json();else throw new Error(\"Problème de réponse \", response);\n    }).then(function (data) {\n      //console.log(\"Data: \", data);\n      return data;\n    });\n  });\n\n  _defineProperty(this, \"getShape\", function (sessionId, fetchMapQuestSuccess) {\n    var query = \"\".concat(Conf.api[\"map-quest\"].END_POINT).concat(Conf.api[\"map-quest\"].URI_SHAPE, \"key=\").concat(_this.key, \"&sessionId=\").concat(sessionId, \"&fullShape=true\");\n    return fetch(query).then(function (response) {\n      if (response.status === 200) return response.json();else throw new Error(\"Problème de réponse \", response);\n    }).then(function (data) {\n      //console.log(\"Data: \", data);\n      fetchMapQuestSuccess(data.route.shape.shapePoints);\n    });\n  });\n\n  this.key = Conf.api[\"map-quest\"].APPID;\n  this.from = \"2153+route+de+Mende%2C+34090+Montpellier%2C+france\";\n}\n/**\n * Fetch to get route sessionID\n * @param {string} road\n * @param {string} zipCode\n * @param {string} city\n */\n;\n\nexport default FetchMapQuest;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/services/FetchMapQuest.js"],"names":["Conf","FetchMapQuest","road","zipCode","city","to","query","api","END_POINT","URI_ROUTE","key","from","fetch","then","response","status","json","Error","data","sessionId","fetchMapQuestSuccess","URI_SHAPE","route","shape","shapePoints","APPID"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AAEA;;;;IAGMC,a,GACJ,yBAAc;AAAA;;AAAA;;AAAA,oCAWH,UAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAyB;AAClC,QAAIC,EAAE,aAAMH,IAAN,iBAAiBC,OAAjB,iBAA+BC,IAA/B,eAAN;AACA,QAAIE,KAAK,aAAMN,IAAI,CAACO,GAAL,CAAS,WAAT,EAAsBC,SAA5B,SAAwCR,IAAI,CAACO,GAAL,CAAS,WAAT,EAAsBE,SAA9D,iBAA8E,KAAI,CAACC,GAAnF,mBAA+F,KAAI,CAACC,IAApG,iBAA+GN,EAA/G,mIAAT;AAEA,WAAOO,KAAK,CAACN,KAAD,CAAL,CACJO,IADI,CACC,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP,CAA7B,KACK,MAAM,IAAIC,KAAJ,CAAU,sBAAV,EAAkCH,QAAlC,CAAN;AACN,KAJI,EAKJD,IALI,CAKC,UAACK,IAAD,EAAU;AACd;AACA,aAAOA,IAAP;AACD,KARI,CAAP;AASD,GAxBa;;AAAA,oCA+BH,UAACC,SAAD,EAAYC,oBAAZ,EAAqC;AAC9C,QAAMd,KAAK,aAAMN,IAAI,CAACO,GAAL,CAAS,WAAT,EAAsBC,SAA5B,SAAwCR,IAAI,CAACO,GAAL,CAAS,WAAT,EAAsBc,SAA9D,iBAA8E,KAAI,CAACX,GAAnF,wBAAoGS,SAApG,oBAAX;AACA,WAAOP,KAAK,CAACN,KAAD,CAAL,CACJO,IADI,CACC,UAACC,QAAD,EAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP,CAA7B,KACK,MAAM,IAAIC,KAAJ,CAAU,sBAAV,EAAkCH,QAAlC,CAAN;AACN,KAJI,EAKJD,IALI,CAKC,UAACK,IAAD,EAAU;AACd;AACAE,MAAAA,oBAAoB,CAACF,IAAI,CAACI,KAAL,CAAWC,KAAX,CAAiBC,WAAlB,CAApB;AACD,KARI,CAAP;AASD,GA1Ca;;AACZ,OAAKd,GAAL,GAAWV,IAAI,CAACO,GAAL,CAAS,WAAT,EAAsBkB,KAAjC;AACA,OAAKd,IAAL,GAAY,oDAAZ;AACD;AAED;;;;;;;;AAuCF,eAAeV,aAAf","sourcesContent":["import Conf from \"../config/config-dev\";\n\n/**\n * Request MAPQUEST route\n */\nclass FetchMapQuest {\n  constructor() {\n    this.key = Conf.api[\"map-quest\"].APPID;\n    this.from = \"2153+route+de+Mende%2C+34090+Montpellier%2C+france\";\n  }\n\n  /**\n   * Fetch to get route sessionID\n   * @param {string} road\n   * @param {string} zipCode\n   * @param {string} city\n   */\n  getRoute = (road, zipCode, city) => {\n    let to = `${road}%2C+${zipCode}%20+${city}%2C+france`;\n    let query = `${Conf.api[\"map-quest\"].END_POINT}${Conf.api[\"map-quest\"].URI_ROUTE}key=${this.key}&from=${this.from}&to=${to}&outFormat=json&ambiguities=ignore&routeType=fastest&doReverseGeocode=false&enhancedNarrative=false&avoidTimedConditions=false`;\n\n    return fetch(query)\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error(\"Problème de réponse \", response);\n      })\n      .then((data) => {\n        //console.log(\"Data: \", data);\n        return data;\n      });\n  };\n\n  /**\n   * Fetch to get route shape\n   * @param {string} sessionId\n   * @param {function} fetchMapQuestSuccess\n   */\n  getShape = (sessionId, fetchMapQuestSuccess) => {\n    const query = `${Conf.api[\"map-quest\"].END_POINT}${Conf.api[\"map-quest\"].URI_SHAPE}key=${this.key}&sessionId=${sessionId}&fullShape=true`;\n    return fetch(query)\n      .then((response) => {\n        if (response.status === 200) return response.json();\n        else throw new Error(\"Problème de réponse \", response);\n      })\n      .then((data) => {\n        //console.log(\"Data: \", data);\n        fetchMapQuestSuccess(data.route.shape.shapePoints);\n      });\n  };\n}\nexport default FetchMapQuest;\n"]},"metadata":{},"sourceType":"module"}