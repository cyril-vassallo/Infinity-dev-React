{"ast":null,"code":"var _jsxFileName = \"/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/three/scene/Scene.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { NavLink } from \"react-router-dom\"; //import { openFullscreen, closeFullscreen } from \"../../../services/utils\";\n\nclass Scene extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"test\", () => {\n      this.removeMeshes();\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      // openFullscreen();\n      this.audioElement.play();\n      this.initScene();\n      this.createSunMesh();\n      this.createPlanetMesh();\n      this.createCardMesh();\n      this.createRockMeshes();\n      this.rotatePlanet();\n      this.rotateCard();\n      this.rotateRocks();\n      this.rotateSun();\n      this.addEventListeners();\n    });\n\n    _defineProperty(this, \"componentWillUnmount\", () => {\n      this.audioElement.pause();\n      this.removeEventListeners();\n      this.removeMeshes(); // closeFullscreen();\n    });\n\n    _defineProperty(this, \"removeMeshes\", () => {\n      this.scene.remove(this.meshCard).remove(this.meshPlanet).remove(this.meshSun);\n      this.meshRocks.forEach(rock => {\n        this.scene.remove(rock);\n      });\n      this.renderer.renderLists.dispose();\n      this.renderer.clear();\n    });\n\n    _defineProperty(this, \"removeEventListeners\", () => {\n      this.canvas.removeEventListener(\"mousemove\", this.handleMouseMove, false);\n      window.removeEventListener(\"resize\", this.handleWindowResize, false);\n      this.canvas.removeEventListener(\"wheel\", this.handleMouseRoll, false);\n      this.canvas.removeEventListener(\"dblclick\", this.handleDoubleClick, false);\n    });\n\n    _defineProperty(this, \"addEventListeners\", () => {\n      this.canvas.addEventListener(\"mousemove\", this.handleMouseMove, false);\n      window.addEventListener(\"resize\", this.handleWindowResize, false);\n      this.canvas.addEventListener(\"wheel\", this.handleMouseRoll, false);\n      this.canvas.addEventListener(\"dblclick\", this.handleDoubleClick, false);\n    });\n\n    _defineProperty(this, \"initScene\", () => {\n      const fos = 50;\n      const ratio = window.innerWidth / window.innerHeight;\n      const near = 0.1;\n      const far = 200000;\n      this.camera = new THREE.PerspectiveCamera(fos, ratio, near, far);\n\n      if (window.innerWidth < 500) {\n        this.distance = 1400;\n      }\n\n      this.camera.position.z = this.distance;\n      this.camera.lookAt(this.scene.position);\n      this.renderer = new THREE.WebGLRenderer({\n        autoClear: true,\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.canvas = document.querySelector(\"#web-gl-scene\");\n      this.canvas.appendChild(this.renderer.domElement);\n    });\n\n    _defineProperty(this, \"createCardMesh\", () => {\n      const length = 100,\n            width = 60,\n            depth = 1,\n            path = \"img/card/\",\n            format = \".png\";\n      const url = \"card\" + format; // [\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      //   path + \"card\" + format,\n      // ]\n\n      const texture = new THREE.TextureLoader().setPath(path).load(url);\n      const geometry = new THREE.BoxGeometry(length, width, depth); //A material need texture or a basic material\n\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 0.50\n      }); //A Mesh need a geometry and material object\n\n      this.meshCard = new THREE.Mesh(geometry, material);\n      this.meshCard.name = \"Card\";\n      this.meshCard.position.x = 0;\n      this.meshCard.position.y = 0;\n      this.meshCard.position.z = 1050;\n      this.scene.add(this.meshCard);\n      this.renderer.render(this.scene, this.camera);\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n    });\n\n    _defineProperty(this, \"createRockMeshes\", () => {\n      const texture = new THREE.TextureLoader().load(\"img/card/rock.jpg\");\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 0.5\n      });\n      const max = 2000;\n      const maxSize = Math.floor(Math.random() * Math.floor(200));\n\n      for (let i = 0; i < Math.floor(Math.random() * Math.floor(10)); i++) {\n        const geometry = new THREE.SphereBufferGeometry(Math.random() * Math.floor(maxSize), 8, 8); //A material need texture or a basic material\n        //A Mesh need a geometry and material object\n\n        const meshRock = new THREE.Mesh(geometry, material);\n        meshRock.position.x = Math.floor(Math.random() * Math.floor(max) - window.innerWidth);\n        meshRock.position.y = Math.floor(Math.random() * Math.floor(max) - window.innerHeight);\n        meshRock.position.z = Math.floor(Math.random() * Math.floor(max) - 600);\n        meshRock.name = \"Rock\" + i;\n        this.scene.add(meshRock);\n        this.meshRocks.push(meshRock);\n        geometry.dispose();\n      }\n\n      material.dispose();\n      texture.dispose();\n      this.renderer.render(this.scene, this.camera);\n    });\n\n    _defineProperty(this, \"createPlanetMesh\", () => {\n      const texture = new THREE.TextureLoader().load(\"img/card/earth-night.jpg\");\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 1\n      });\n      const geometry = new THREE.SphereBufferGeometry(500, 20, 20);\n      this.meshPlanet = new THREE.Mesh(geometry, material);\n      this.meshPlanet.name = \"Planet\";\n      this.meshPlanet.position.x = 500;\n      this.meshPlanet.position.y = 0;\n      this.meshPlanet.position.z = -1000;\n      this.scene.add(this.meshPlanet);\n      this.renderer.render(this.scene, this.camera);\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n    });\n\n    _defineProperty(this, \"createSunMesh\", () => {\n      const texture = new THREE.TextureLoader().load(\"img/card/sun.jpg\");\n      const material = new THREE.MeshBasicMaterial({\n        map: texture,\n        opacity: 1\n      });\n      const geometry = new THREE.SphereBufferGeometry(15000, 30, 30);\n      this.meshSun = new THREE.Mesh(geometry, material);\n      this.meshSun.name = \"Sun\";\n      this.meshSun.position.x = 15000;\n      this.meshSun.position.y = 0;\n      this.meshSun.position.z = -15000;\n      this.scene.add(this.meshSun);\n      this.renderer.render(this.scene, this.camera);\n      geometry.dispose();\n      material.dispose();\n      texture.dispose();\n    });\n\n    _defineProperty(this, \"handleDoubleClick\", () => {\n      this.camera.position.z = this.distance;\n      this.renderer.render(this.scene, this.camera);\n    });\n\n    _defineProperty(this, \"handleMouseRoll\", () => {\n      this.camera.position.z += 5;\n      this.renderer.render(this.scene, this.camera);\n    });\n\n    _defineProperty(this, \"handleMouseMove\", e => {\n      const mouseX = (e.clientX - window.innerWidth / 2) * 0.1;\n      const mouseY = (e.clientY - window.innerHeight / 2) * 0.1;\n      this.camera.position.x = mouseX;\n      this.camera.position.y = -mouseY;\n      this.camera.lookAt(this.scene.position);\n      this.renderer.render(this.scene, this.camera);\n    });\n\n    _defineProperty(this, \"handleWindowResize\", () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n      if (window.innerWidth < 500) {\n        this.isMobileDevice = true;\n\n        if (this.isMobileDevice) {\n          this.distance = 1500;\n          this.camera.position.z = this.distance;\n          this.camera.lookAt(this.scene.position);\n          this.renderer.render(this.scene, this.camera);\n        }\n      } else {\n        this.isMobileDevice = false;\n\n        if (!this.isMobileDevice) {\n          this.distance = 1200;\n          this.camera.position.z = this.distance;\n          this.camera.lookAt(this.scene.position);\n          this.renderer.render(this.scene, this.camera);\n        }\n      }\n    });\n\n    _defineProperty(this, \"rotateCard\", () => {\n      setTimeout(() => {\n        requestAnimationFrame(this.rotateCard);\n        this.meshCard.rotation.x = 0.5;\n        this.meshCard.rotation.y += 0.01;\n        this.meshCard.rotation.z = 0.5;\n        this.renderer.render(this.scene, this.camera);\n      }, 60);\n    });\n\n    _defineProperty(this, \"rotatePlanet\", () => {\n      setTimeout(() => {\n        requestAnimationFrame(this.rotatePlanet);\n        this.meshPlanet.rotation.y += 0.005;\n        this.renderer.render(this.scene, this.camera);\n      }, 60);\n    });\n\n    _defineProperty(this, \"rotateSun\", () => {\n      setTimeout(() => {\n        requestAnimationFrame(this.rotateSun);\n        this.meshSun.rotation.y += 0.0001;\n        this.renderer.render(this.scene, this.camera);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"rotateRocks\", () => {\n      setTimeout(() => {\n        requestAnimationFrame(this.rotateRocks);\n        this.meshRocks.forEach(meshRock => {\n          meshRock.rotation.x += 0.01;\n          meshRock.rotation.y += 0.005;\n          this.renderer.render(this.scene, this.camera);\n        });\n      }, 100);\n    });\n\n    this.audioElement = new Audio(\"media/music/Gamma.mp3\");\n    this.isMobileDevice = null;\n    this.scene = new THREE.Scene();\n    this.camera = null;\n    this.renderer = null;\n    this.canvas = null;\n    this.distance = 1200;\n    this.meshCard = null;\n    this.meshSun = null;\n    this.meshPlanet = null;\n    this.meshRocks = [];\n  }\n  /**\n   * Test Method\n   */\n\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"web-gl-scene\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 7\n      }\n    }, __jsx(NavLink, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }\n    }, __jsx(\"img\", {\n      src: \"svg/close.svg\",\n      alt: \"return to home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/matschik/Code/_matschik/infinity-dev-v2/nextjs/src/components/three/scene/Scene.jsx"],"names":["React","Component","THREE","NavLink","Scene","constructor","removeMeshes","audioElement","play","initScene","createSunMesh","createPlanetMesh","createCardMesh","createRockMeshes","rotatePlanet","rotateCard","rotateRocks","rotateSun","addEventListeners","pause","removeEventListeners","scene","remove","meshCard","meshPlanet","meshSun","meshRocks","forEach","rock","renderer","renderLists","dispose","clear","canvas","removeEventListener","handleMouseMove","window","handleWindowResize","handleMouseRoll","handleDoubleClick","addEventListener","fos","ratio","innerWidth","innerHeight","near","far","camera","PerspectiveCamera","distance","position","z","lookAt","WebGLRenderer","autoClear","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","document","querySelector","appendChild","domElement","length","width","depth","path","format","url","texture","TextureLoader","setPath","load","geometry","BoxGeometry","material","MeshBasicMaterial","map","opacity","Mesh","name","x","y","add","render","max","maxSize","Math","floor","random","i","SphereBufferGeometry","meshRock","push","e","mouseX","clientX","mouseY","clientY","aspect","updateProjectionMatrix","isMobileDevice","setTimeout","requestAnimationFrame","rotation","Audio"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { NavLink } from \"react-router-dom\";\n//import { openFullscreen, closeFullscreen } from \"../../../services/utils\";\n\nclass Scene extends Component {\n  constructor() {\n    super();\n    this.audioElement = new Audio(\"media/music/Gamma.mp3\");\n    this.isMobileDevice = null;\n    this.scene = new THREE.Scene();\n    this.camera = null;\n    this.renderer = null;\n    this.canvas = null;\n    this.distance = 1200;\n    this.meshCard = null;\n    this.meshSun = null;\n    this.meshPlanet = null;\n    this.meshRocks = [];\n  }\n\n  /**\n   * Test Method\n   */\n  test = () => {\n    this.removeMeshes();\n  };\n\n  /**\n   * Script Start Execution on component\n   */\n  componentDidMount = () => {\n    // openFullscreen();\n    this.audioElement.play();\n    this.initScene();\n    this.createSunMesh();\n    this.createPlanetMesh();\n    this.createCardMesh();\n    this.createRockMeshes();\n    this.rotatePlanet();\n    this.rotateCard();\n    this.rotateRocks();\n    this.rotateSun();\n    this.addEventListeners();\n\n  };\n\n  /**\n   * Script stop Execution on component\n   */\n  componentWillUnmount = () => {\n    this.audioElement.pause();\n    this.removeEventListeners();\n    this.removeMeshes();\n    // closeFullscreen();\n  };\n\n  /**\n   * Three.js\n   * remove Mesh and  them components from the scene\n   */\n  removeMeshes = () => {\n    this.scene\n      .remove(this.meshCard)\n      .remove(this.meshPlanet)\n      .remove(this.meshSun);\n    this.meshRocks.forEach((rock)=> {\n      this.scene.remove(rock)\n    });\n    this.renderer.renderLists.dispose();\n    this.renderer.clear();\n  };\n\n  /**\n   * Remove all scene events\n   */\n  removeEventListeners = () => {\n    this.canvas.removeEventListener(\"mousemove\", this.handleMouseMove, false);\n    window.removeEventListener(\"resize\", this.handleWindowResize, false);\n    this.canvas.removeEventListener(\"wheel\", this.handleMouseRoll, false);\n    this.canvas.removeEventListener(\"dblclick\", this.handleDoubleClick, false);\n  };\n\n  /**\n   * add all scene events\n   */\n  addEventListeners = () => {\n    this.canvas.addEventListener(\"mousemove\", this.handleMouseMove, false);\n    window.addEventListener(\"resize\", this.handleWindowResize, false);\n    this.canvas.addEventListener(\"wheel\", this.handleMouseRoll, false);\n    this.canvas.addEventListener(\"dblclick\", this.handleDoubleClick, false);\n  };\n\n  /**\n   * Initialize this.scene , this.camera, this.renderer and this.canvas\n   */\n  initScene = () => {\n    const fos = 50;\n    const ratio = window.innerWidth / window.innerHeight;\n    const near = 0.1;\n    const far = 200000;\n    this.camera = new THREE.PerspectiveCamera(fos, ratio, near, far);\n    if (window.innerWidth < 500) {\n      this.distance = 1400;\n    }\n    this.camera.position.z = this.distance;\n    this.camera.lookAt(this.scene.position);\n\n    this.renderer = new THREE.WebGLRenderer({\n      autoClear: true,\n      antialias: true,\n      alpha: true,\n    });\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n\n    this.canvas = document.querySelector(\"#web-gl-scene\");\n\n    this.canvas.appendChild(this.renderer.domElement);\n  };\n\n  /**\n   * Create and render Elements\n   */\n  createCardMesh = () => {\n    const length = 100,\n      width = 60,\n      depth = 1,\n      path = \"img/card/\",\n      format = \".png\";\n    const url = \"card\" + format; // [\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    //   path + \"card\" + format,\n    // ]\n    const texture = new THREE.TextureLoader().setPath(path).load(url);\n\n    const geometry = new THREE.BoxGeometry(length, width, depth);\n\n    //A material need texture or a basic material\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 0.50,\n    });\n\n    //A Mesh need a geometry and material object\n    this.meshCard = new THREE.Mesh(geometry, material);\n    this.meshCard.name = \"Card\";\n    this.meshCard.position.x = 0;\n    this.meshCard.position.y = 0;\n    this.meshCard.position.z = 1050;\n    this.scene.add(this.meshCard);\n    this.renderer.render(this.scene, this.camera);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  };\n\n  /**\n   * Create and render Elements\n   */\n  createRockMeshes = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/rock.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 0.5,\n    });\n    const max = 2000;\n    const maxSize = Math.floor(Math.random() * Math.floor(200));\n    for (let i = 0; i < Math.floor(Math.random() * Math.floor(10)); i++) {\n      const geometry = new THREE.SphereBufferGeometry(\n        Math.random() * Math.floor(maxSize),\n        8,\n        8\n      );\n      //A material need texture or a basic material\n\n      //A Mesh need a geometry and material object\n      const meshRock = new THREE.Mesh(geometry, material);\n      meshRock.position.x = Math.floor(\n        Math.random() * Math.floor(max) - window.innerWidth\n      );\n      meshRock.position.y = Math.floor(\n        Math.random() * Math.floor(max) - window.innerHeight\n      );\n      meshRock.position.z = Math.floor(Math.random() * Math.floor(max) - 600);\n      meshRock.name = \"Rock\" + i;\n      this.scene.add(meshRock);\n      this.meshRocks.push(meshRock);\n      geometry.dispose();\n    }\n    material.dispose();\n    texture.dispose();\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  createPlanetMesh = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/earth-night.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 1,\n    });\n    const geometry = new THREE.SphereBufferGeometry(500, 20, 20);\n    this.meshPlanet = new THREE.Mesh(geometry, material);\n    this.meshPlanet.name = \"Planet\";\n    this.meshPlanet.position.x = 500;\n    this.meshPlanet.position.y = 0;\n    this.meshPlanet.position.z = -1000;\n    this.scene.add(this.meshPlanet);\n       this.renderer.render(this.scene, this.camera);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  };\n\n  createSunMesh = () => {\n    const texture = new THREE.TextureLoader().load(\"img/card/sun.jpg\");\n    const material = new THREE.MeshBasicMaterial({\n      map: texture,\n      opacity: 1,\n    });\n    const geometry = new THREE.SphereBufferGeometry(15000, 30, 30);\n    this.meshSun = new THREE.Mesh(geometry, material);\n    this.meshSun.name = \"Sun\";\n    this.meshSun.position.x = 15000;\n    this.meshSun.position.y = 0;\n    this.meshSun.position.z = -15000;\n    this.scene.add(this.meshSun);\n    this.renderer.render(this.scene, this.camera);\n    geometry.dispose();\n    material.dispose();\n    texture.dispose();\n  };\n\n  /**\n   * Manage mouse roll effect\n   */\n  handleDoubleClick = () => {\n    this.camera.position.z = this.distance;\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n  /**\n   * Manage mouse roll effect\n   */\n  handleMouseRoll = () => {\n    this.camera.position.z += 5;\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * Manage animations mouse mouve effect\n   */\n  handleMouseMove = (e) => {\n    const mouseX = (e.clientX - window.innerWidth / 2) * 0.1;\n    const mouseY = (e.clientY - window.innerHeight / 2) * 0.1;\n    this.camera.position.x = mouseX;\n    this.camera.position.y = -mouseY;\n    this.camera.lookAt(this.scene.position);\n    this.renderer.render(this.scene, this.camera);\n  };\n\n  /**\n   * Manage camera aspect on window resize\n   */\n  handleWindowResize = () => {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    if (window.innerWidth < 500) {\n      this.isMobileDevice = true;\n      if (this.isMobileDevice) {\n        this.distance = 1500;\n        this.camera.position.z = this.distance;\n        this.camera.lookAt(this.scene.position);\n        this.renderer.render(this.scene, this.camera);\n      }\n    } else {\n      this.isMobileDevice = false;\n      if (!this.isMobileDevice) {\n        this.distance = 1200;\n        this.camera.position.z = this.distance;\n        this.camera.lookAt(this.scene.position);\n        this.renderer.render(this.scene, this.camera);\n      }\n    }\n  };\n\n  /*Make the mesh rotate */\n  rotateCard = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotateCard);\n      this.meshCard.rotation.x = 0.5;\n      this.meshCard.rotation.y += 0.01;\n      this.meshCard.rotation.z = 0.5;\n      this.renderer.render(this.scene, this.camera);\n    }, 60);\n  };\n\n  /** Make the planet rotate */\n  rotatePlanet = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotatePlanet);\n      this.meshPlanet.rotation.y += 0.005;\n      this.renderer.render(this.scene, this.camera);\n    }, 60);\n  };\n\n  /**Make the sun rotate */\n  rotateSun = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotateSun);\n      this.meshSun.rotation.y += 0.0001;\n      this.renderer.render(this.scene, this.camera);\n    }, 1000);\n  };\n\n  /** Make the rocks rotate*/\n  rotateRocks = () => {\n    setTimeout(() => {\n      requestAnimationFrame(this.rotateRocks);\n      this.meshRocks.forEach((meshRock) => {\n        meshRock.rotation.x += 0.01;\n        meshRock.rotation.y += 0.005;\n        this.renderer.render(this.scene, this.camera);\n      });\n    }, 100);\n  };\n\n  render() {\n    return (\n      <div id=\"web-gl-scene\">\n        <NavLink to=\"/\">\n          <img src=\"svg/close.svg\" alt=\"return to home\" />\n        </NavLink>\n      </div>\n     \n    );\n  }\n}\n\nexport default Scene;\n"]},"metadata":{},"sourceType":"module"}